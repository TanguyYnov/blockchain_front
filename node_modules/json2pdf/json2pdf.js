#!/usr/bin/env node


var http = require('http');
var moment = require('moment');
var PDFDocument = require('pdfkit');	
var fs = require('fs');
var request = require('request');

function printParams(doc,data) {
	console.log('Print params');
	
	//~ doc.moveUp();
	doc.fontSize(10).font('Helvetica');
	var headtext = "Report:   " + data.displayname+ "    " + moment().format("YYYY/MM/DD HH:mm:ss") + "\n";
	
	doc.text(headtext);

	if (typeof data.filter.fltuser !== 'undefined') {
		doc.text('User  :   '+data.filter.fltuser);
	}
	var flt="";
	if (typeof data.filter.fltfrom !== 'undefined') {
		flt +=("  Date from: "+data.filter.fltfrom);
	}
	if (typeof data.filter.fltto !== 'undefined') {
		flt +=("  Date to: "+data.filter.fltto);
	}
	if (typeof data.filter.fltyr !== 'undefined') {
		flt +=("  Year: "+data.filter.fltyr);
	}
	if (typeof data.filter.fltmn !== 'undefined') {
		flt +=("  Month: "+data.filter.fltmn);
	}
	if (flt!=="")
		doc.text("Parameters: " + flt);
	doc.moveDown();
}


function printGridHeader(doc,header,headpos) {
	var i=0;
	//~ console.log('Print header');
	doc.fontSize(8).font('Helvetica-Bold');
	for (prop in header) {
		if (typeof header[prop] !== 'function') {
			if (headpos[i]>0)
				doc.text(header[prop].dpn, headpos[i] ).moveUp();
		}
		i++;
	}
	doc.moveDown(1);
}

function printData(doc,r,headpos) {
	//~ console.log('Print data');
	doc.fontSize(8).font('Helvetica');
	var i=0;
	for (prop in r) {
		if (typeof r[prop] !== 'function') {
			if (headpos[i]>0)
				doc.text(r[prop], headpos[i]).moveUp();
		}
		i++;
	}
	doc.moveDown();
}


function calcAutoWidth(doc,data) {
	doc.fontSize(8).font('Helvetica');
	// CALCULATE AUTO WIDTH FROM DATA
	var colWidth=[];
	if (data.items.length>0) {
		var dat=data.items[0];
		for (prop in dat) {
			var w= Math.round(doc.widthOfString(dat[prop].toString()));
			colWidth.push(w);
		}
	}
	// ADJUST AUTO WIDTH WITH HEADER
	doc.fontSize(8).font('Helvetica-Bold');
	var i=0;

	var colOffs=doc.page.margins.left;
	var colPos=[];
	for (prop in data.header) {
		var w= Math.round(doc.widthOfString(data.header[prop].dpn)+10);
		if (w > colWidth[i] ) colWidth[i] = w;
		// set column padding
		colWidth[i] += 5;
		
		if (colOffs + colWidth[i] > doc.page.width-doc.page.margins.right) {
			console.log('Column %d out of border',i);
			colWidth[i] = 10;// Math.round(doc.page.width - doc.page.margins.right - colOffs);
			colPos.push(-1);
		}
		else
		{
			colPos.push(colOffs);
			colOffs += colWidth[i];
			
		}
		i++;
	}
	//~ console.log(colPos,doc.page.width-doc.page.margins.right);
	//~ console.log(colWidth);
	return colPos;
}

String.prototype.repeat = function(times) {
   return (new Array(times + 1)).join(this);
};

function getPageCount(doc,data) {
	var fontSize=11;
	var validSpace= doc.page.height - doc.page.margins.bottom - doc.page.margins.top - doc.footerSize - 100;
	var rowCount  = Math.round(validSpace / fontSize);
	//~ console.log(rowCount);
	return Math.round(data.items.length / rowCount);
}

function isLastRow(doc) {
	var fontsize=12;
	return (doc.page.height - doc.page.margins.bottom) - doc.y < (fontsize + doc.footerSize +1);
}

function printPageCounter(doc,pages,allpage) {
	//~ var ptxt='Page '+pages+'/'+allpage;
	var ptxt='(Page '+pages+')';
	var ptxtw = doc.fontSize(8).widthOfString(ptxt);
	var xpos = (doc.page.width/2) - (ptxtw/2);
	doc.text(ptxt, xpos, doc.page.height - doc.page.margins.bottom - 15 );	
}

function jsonToPdf(pdfsettings, data, outputStream, cb ) { //cb(percent)
	
	var doc = new PDFDocument(pdfsettings);
	
	doc.pipe(outputStream).on('finish', function() {
		cb(pages,allpage);
		//~ console.log('stream finished');
	});
	
	doc.footerSize     		= 20;
	doc.page.margins.left	= 20;
	doc.page.margins.right	= 20;
	doc.page.margins.top	= 20;
	doc.page.margins.bottom	= 20;

	doc.x  = doc.page.margins.left;
	doc.y  = doc.page.margins.top;
	
	var headpos = calcAutoWidth(doc,data);
	printParams(doc,data);
	printGridHeader(doc,data.header,headpos);

	doc.fontSize(11).font('Helvetica');
	var y=0;
	
	var pages=1;
	var allpage=getPageCount(doc,data);
	
	console.log('Pages',allpage);
	data.items.forEach(function(r,i) {
		var newpage = isLastRow(doc);
		if (newpage) {
			console.log(pages,allpage);
			printPageCounter(doc,pages,allpage);
			pages++;
			printGridHeader(doc,data.header,headpos);
		}
		printData(doc,r,headpos);
		//~ console.log(i,'/',data.items.length);
		y++;
	});
	printPageCounter(doc,pages,allpage);
	doc.end();
}



module.exports = jsonToPdf;
